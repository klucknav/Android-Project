#version 150 compatibility
#extension GL_EXT_geometry_shader4 : enable
#extension GL_ARB_gpu_shader5 : enable

uniform float viewer0Dist;
uniform float viewer1Dist;

flat out vec3 color0;
flat out vec3 color1;
flat out vec3 color2;

flat out vec3 pos0;
flat out vec3 pos1;
flat out vec3 pos2;

in vec3 normals[3];

flat out float diffuseV0P0;
flat out float diffuseV0P1;
flat out float diffuseV0P2;
flat out float diffuseV1P0;
flat out float diffuseV1P1;
flat out float diffuseV1P2;

in vec2 texcoord[3];

flat out float texture;
flat out vec2 tcoord0;
flat out vec2 tcoord1;
flat out vec2 tcoord2;

void main(void)
{
    pos0 = gl_PositionIn[0].xyz;
    pos1 = gl_PositionIn[1].xyz;
    pos2 = gl_PositionIn[2].xyz;

    color0 = gl_FrontColorIn[0].rgb;
    color1 = gl_FrontColorIn[1].rgb;
    color2 = gl_FrontColorIn[2].rgb;

    //color0 = vec3(0.0,0.0,1.0);
    //color1 = vec3(0.0,1.0,0.0);
    //color2 = vec3(1.0,0.0,0.0);

    vec4 t0p0 = gl_TextureMatrix[4] * gl_PositionIn[0];
    vec4 t0p1 = gl_TextureMatrix[4] * gl_PositionIn[1];
    vec4 t0p2 = gl_TextureMatrix[4] * gl_PositionIn[2];

    vec4 t1p0 = gl_TextureMatrix[6] * gl_PositionIn[0];
    vec4 t1p1 = gl_TextureMatrix[6] * gl_PositionIn[1];
    vec4 t1p2 = gl_TextureMatrix[6] * gl_PositionIn[2];

    vec4 lightPos = gl_TextureMatrix[4] * gl_LightSource[0].position;
    vec3 ptol;
    vec4 normal;

    normal = vec4(normals[0],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[4] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t0p0.xyz);
    diffuseV0P0 = dot(ptol, normal.xyz);

    normal = vec4(normals[1],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[4] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t0p1.xyz);
    diffuseV0P1 = dot(ptol, normal.xyz);

    normal = vec4(normals[2],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[4] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t0p2.xyz);
    diffuseV0P2 = dot(ptol, normal.xyz);

    lightPos = gl_TextureMatrix[6] * gl_LightSource[0].position;
    
    normal = vec4(normals[0],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[6] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t1p0.xyz);
    diffuseV1P0 = dot(ptol, normal.xyz);

    normal = vec4(normals[1],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[6] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t1p1.xyz);
    diffuseV1P1 = dot(ptol, normal.xyz);

    normal = vec4(normals[2],0.0);
    normal = gl_ModelViewMatrixInverseTranspose * normal;
    normal.w = 0.0;
    normal = gl_TextureMatrixInverseTranspose[6] * normal;
    normal.xyz = normalize(normal.xyz);
    ptol = normalize(lightPos.xyz - t1p2.xyz);
    diffuseV1P2 = dot(ptol, normal.xyz);

    if(diffuseV0P0 <= 0 && diffuseV0P0 <= 0 && diffuseV0P0 <= 0 && diffuseV0P0 <= 0 && diffuseV0P0 <= 0 && diffuseV0P0 <= 0)
    {
	//return;
    }

    diffuseV0P0 = max(0.0, diffuseV0P0);
    diffuseV0P1 = max(0.0, diffuseV0P1);
    diffuseV0P2 = max(0.0, diffuseV0P2);
    diffuseV1P0 = max(0.0, diffuseV1P0);
    diffuseV1P1 = max(0.0, diffuseV1P1);
    diffuseV1P2 = max(0.0, diffuseV1P2);

    tcoord0 = texcoord[0];
    tcoord1 = texcoord[1];
    tcoord2 = texcoord[2];


    //vec2 textest;
    //textest = texcoord[0] + texcoord[1] + texcoord[2];
    /*if(texcoord[0].x == 0.0)
    {
	texture = 0.0;
	color0 = vec3(0.0,1.0,0.0);
    }
    else
    {
	texture = 1.0;
	tcoord0 = texcoord[0];
	tcoord1 = texcoord[1];
	tcoord2 = texcoord[2];
	color0 = vec3(1.0,0.0,0.0);
    }*/
    //color0 = texcoord[2].y * vec3(1.0,0.0,0.0);

    t0p0 = gl_TextureMatrix[5] * t0p0;
    t0p1 = gl_TextureMatrix[5] * t0p1;
    t0p2 = gl_TextureMatrix[5] * t0p2;

    t1p0 = gl_TextureMatrix[7] * t1p0;
    t1p1 = gl_TextureMatrix[7] * t1p1;
    t1p2 = gl_TextureMatrix[7] * t1p2;


    /*mat4 trans = gl_TextureMatrix[5] * gl_TextureMatrix[4];
    
    vec4 t0p0 = trans * gl_PositionIn[0];
    vec4 t0p1 = trans * gl_PositionIn[1];
    vec4 t0p2 = trans * gl_PositionIn[2];

    //t0p0 = t0p0 / t0p0.w;
    //t0p1 = t0p1 / t0p1.w;
    //t0p2 = t0p2 / t0p2.w;

    trans = gl_TextureMatrix[7] * gl_TextureMatrix[6];

    vec4 t1p0 = trans * gl_PositionIn[0];
    vec4 t1p1 = trans * gl_PositionIn[1];
    vec4 t1p2 = trans * gl_PositionIn[2];

    //t1p0 = t1p0 / t1p0.w;
    //t1p1 = t1p1 / t1p1.w;
    //t1p2 = t1p2 / t1p2.w;*/

    /*float minDepth, maxDepth;

    minDepth = min(t0p0.z, t0p1.z);
    minDepth = min(minDepth, t0p2.z);
    minDepth = min(minDepth, t1p0.z);
    minDepth = min(minDepth, t1p1.z);
    minDepth = min(minDepth, t1p2.z);

    minDepth = max(minDepth, -1.0);

    maxDepth = max(t0p0.z, t0p1.z);
    maxDepth = max(maxDepth, t0p2.z);
    maxDepth = max(maxDepth, t1p0.z);
    maxDepth = max(maxDepth, t1p1.z);
    maxDepth = max(maxDepth, t1p2.z);

    if(maxDepth < -1.0)
    {
	return;
    }

    t0p0.z = minDepth;
    t0p1.z = minDepth;
    t0p2.z = minDepth;
    t1p0.z = minDepth;
    t1p1.z = minDepth;
    t1p2.z = minDepth;*/

    /*gl_Position = vec4(-1.0,-1.0,0.0,1.0);
    EmitVertex();
    gl_Position = vec4(-1.0,1.0,0.0,1.0);
    EmitVertex();
    gl_Position = vec4(1.0,-1.0,0.0,1.0);
    EmitVertex();
    gl_Position = vec4(1.0,1.0,0.0,1.0);
    EmitVertex();

    return;*/

    gl_Position = t0p0;
    EmitVertex();
    gl_Position = t0p1;
    EmitVertex();
    gl_Position = t0p2;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p0;
    EmitVertex();
    gl_Position = t1p0;
    EmitVertex();
    gl_Position = t1p1;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p0;
    EmitVertex();
    gl_Position = t1p1;
    EmitVertex();
    gl_Position = t0p1;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p0;
    EmitVertex();
    gl_Position = t1p2;
    EmitVertex();
    gl_Position = t1p0;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p0;
    EmitVertex();
    gl_Position = t0p2;
    EmitVertex();
    gl_Position = t1p2;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p1;
    EmitVertex();
    gl_Position = t1p1;
    EmitVertex();
    gl_Position = t1p2;
    EmitVertex();
    EndPrimitive();

    gl_Position = t0p2;
    EmitVertex();
    gl_Position = t0p1;
    EmitVertex();
    gl_Position = t1p2;
    EmitVertex();
    EndPrimitive();

    return;
}
